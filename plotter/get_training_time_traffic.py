import os
import numpy as np
import csv

from config import FrameworkConfiguration


class GetTrainingTimeTraffic(object):
    def __init__(self, date_to_retrieve='YY_mm_dd_HH_MM_SS', target_output="algorithm.csv"):
        if date_to_retrieve != 'YY_mm_dd_HH_MM_SS':
            self.date_to_retrieve = date_to_retrieve  # Date must be in format %Y_%m_%d_%H_%M_%S
        else:
            print("Invalid date")
            exit(1)
        self.target_output = target_output

    def run(self):

        directory = FrameworkConfiguration.directory + 'output/log/'
        log_file = directory + 'log_' + self.date_to_retrieve + '.log'

        print(log_file)

        # Each non empty line is a sent command
        # Command of power is substituted by episode finishing line
        # Minus last line that is the total time

        counter_line = -1
        with open(log_file) as f:
            for line in f:
                if len(line.strip()) != 0:  # Not empty lines
                    counter_line += 1
            last_line = line

        secs = float(last_line.split()[3])
        np.set_printoptions(formatter={'float': lambda output: "{0:0.4f}".format(output)})

        print("Total lines", counter_line)
        print("Last line", last_line)
        print("Seconds", secs)

        if not os.path.isfile(self.target_output):  # If file does not exist
            # Write header
            with open(self.target_output, mode='w') as output_file:
                output_writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                output_writer.writerow(['Date', 'Training_time', 'Sent_commands'])

        with open(self.target_output, mode="a") as output_file:
            output_writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            output_writer.writerow([self.date_to_retrieve, secs, counter_line])


def get_data_before_tuning_unique_path():
    # Get training time in seconds and traffic generated by training process, only sent commands
    # into a file that appends or writes:
    #
    # Date | Training time | Sent commands
    # date |           123 |           150

    # As input file I need only the log file
    # GetTrainingTimeTraffic(date_to_retrieve='2020_11_05_03_27_46', target_output='qlearning_lambda.csv').run()

    sarsa = ['2020_11_05_03_27_46',
             '2020_11_05_04_07_23',
             '2020_11_05_04_48_59',
             '2020_11_05_05_30_35',
             '2020_11_05_06_10_02', ]

    for dat in sarsa:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_sarsa.csv').run()

    sarsa_lambda = ['2020_11_05_06_47_59',
                    '2020_11_05_07_33_31',
                    '2020_11_05_08_04_47',
                    '2020_11_05_08_48_46',
                    '2020_11_05_09_35_46', ]

    for dat in sarsa_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_sarsa_lambda.csv').run()

    qlearning = ['2020_11_05_10_24_34',
                 '2020_11_05_11_05_37',
                 '2020_11_05_11_48_23',
                 '2020_11_05_12_33_03',
                 '2020_11_05_13_16_54', ]

    for dat in qlearning:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_qlearning.csv').run()

    qlearning_lambda = ['2020_11_05_13_54_50',
                        '2020_11_05_14_37_02',
                        '2020_11_05_15_10_00',
                        '2020_11_05_15_49_28',
                        '2020_11_05_16_27_15', ]

    for dat in qlearning_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_qlearning_lambda.csv').run()


def get_data_algos_path(sarsa, sarsa_lambda, qlearning, qlearning_lambda, path=None):

    for dat in sarsa:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='path' + str(path) + '_sarsa.csv').run()

    for dat in sarsa_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='path' + str(path) + '_sarsa_lambda.csv').run()

    for dat in qlearning:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='path' + str(path) + '_qlearning.csv').run()

    for dat in qlearning_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='path' + str(path) + '_qlearning_lambda.csv').run()


if __name__ == '__main__':
    get_data_before_tuning_unique_path()

    target_path = 1
    print("PATH ", target_path)
    sarsa_dates = [
        '2020_11_25_12_48_15',
        '2020_11_25_13_37_48',
        '2020_11_25_14_29_17',
        '2020_11_25_15_35_12',
        '2020_11_25_16_36_56',
        '2020_11_25_17_24_57',
        '2020_11_25_18_14_50',
        '2020_11_25_19_16_07',
        '2020_11_25_20_05_06',
        '2020_11_25_21_03_28',
    ]

    sarsa_lambda_dates = [
        '2020_11_25_21_54_44',
        '2020_11_25_22_49_27',
        '2020_11_25_23_40_38',
        '2020_11_26_00_37_06',
        '2020_11_26_01_30_01',
        '2020_11_26_02_25_21',
        '2020_11_26_03_22_27',
        '2020_11_26_04_12_40',
        '2020_11_26_05_05_32',
        '2020_11_26_05_52_05',
    ]

    qlearning_dates = [
        '2020_11_22_02_19_21',
        '2020_11_22_03_29_10',
        '2020_11_22_04_18_21',
        '2020_11_22_05_13_56',
        '2020_11_22_06_10_46',
        '2020_11_22_07_24_00',
        '2020_11_22_08_21_59',
        '2020_11_22_09_36_02',
        '2020_11_22_10_25_36',
        '2020_11_22_11_14_52',
    ]

    qlearning_lambda_dates = [
        '2020_11_22_12_02_03',
        '2020_11_22_12_50_14',
        '2020_11_22_13_55_12',
        '2020_11_22_14_52_53',
        '2020_11_22_15_45_11',
        '2020_11_22_16_39_57',
        '2020_11_22_17_35_14',
        '2020_11_22_18_43_39',
        '2020_11_22_19_49_24',
        '2020_11_22_20_46_00',
    ]
    get_data_algos_path(sarsa_dates, sarsa_lambda_dates, qlearning_dates, qlearning_lambda_dates, path=target_path)
    target_path = 2
    print("PATH ", target_path)

    sarsa_dates = [
        '2020_11_24_15_03_34',
        '2020_11_24_15_51_12',
        '2020_11_24_16_51_27',
        '2020_11_24_17_45_45',
        '2020_11_24_18_38_37',
        '2020_11_24_19_34_52',
        '2020_11_24_20_26_29',
        '2020_11_24_21_19_02',
        '2020_11_24_22_12_30',
        '2020_11_24_23_03_13',
    ]

    sarsa_lambda_dates = [
        '2020_11_25_00_05_17',
        '2020_11_25_01_00_18',
        '2020_11_25_02_01_42',
        '2020_11_25_03_02_56',
        '2020_11_25_03_55_24',
        '2020_11_25_04_47_54',
        '2020_11_25_05_45_45',
        '2020_11_25_06_46_58',
        '2020_11_25_07_39_08',
        '2020_11_25_08_34_32',
    ]

    qlearning_dates = [
        '2020_11_19_23_20_35',
        '2020_11_20_00_45_39',
        '2020_11_20_01_43_25',
        '2020_11_20_02_58_24',
        '2020_11_20_04_02_19',
        '2020_11_20_04_57_58',
        '2020_11_20_05_52_01',
        '2020_11_20_06_51_41',
        '2020_11_20_07_50_17',
        '2020_11_20_08_48_08',
    ]

    qlearning_lambda_dates = [
        '2020_11_20_09_41_30',
        '2020_11_20_10_36_29',
        '2020_11_20_11_27_28',
        '2020_11_20_12_27_46',
        '2020_11_20_13_35_56',
        '2020_11_20_14_39_49',
        '2020_11_20_15_45_16',
        '2020_11_20_16_43_07',
        '2020_11_20_17_39_35',
        '2020_11_20_18_44_51',
    ]

    get_data_algos_path(sarsa_dates, sarsa_lambda_dates, qlearning_dates, qlearning_lambda_dates, path=target_path)

    target_path = 3
    print("PATH ", target_path)

    sarsa_dates = [
        '2020_11_22_22_20_40',
        '2020_11_22_23_44_50',
        '2020_11_23_01_14_07',
        '2020_11_23_03_01_07',
        '2020_11_23_04_33_00',
        '2020_11_23_05_50_31',
        '2020_11_23_07_13_52',
        '2020_11_23_08_35_52',
        '2020_11_23_09_57_28',
        '2020_11_23_11_36_57',
    ]

    sarsa_lambda_dates = [
        '2020_11_23_18_01_20',
        '2020_11_23_19_27_16',
        '2020_11_23_20_40_12',
        '2020_11_23_21_54_42',
        '2020_11_23_23_24_23',
        '2020_11_24_00_41_00',
        '2020_11_24_02_15_22',
        '2020_11_24_03_27_53',
        '2020_11_24_04_40_32',
        '2020_11_24_05_59_40',
    ]

    qlearning_dates = [
        '2020_11_20_19_55_08',
        '2020_11_20_21_25_32',
        '2020_11_20_22_52_02',
        '2020_11_21_00_14_24',
        '2020_11_21_01_42_09',
        '2020_11_21_03_01_06',
        '2020_11_21_04_21_03',
        '2020_11_21_05_36_05',
        '2020_11_21_07_01_27',
        '2020_11_21_08_22_04',
    ]

    qlearning_lambda_dates = [
        '2020_11_21_09_39_37',
        '2020_11_21_11_09_13',
        '2020_11_21_12_30_19',
        '2020_11_21_13_58_09',
        '2020_11_21_15_29_01',
        '2020_11_21_16_49_23',
        '2020_11_21_18_13_51',
        '2020_11_21_19_54_03',
        '2020_11_21_21_43_57',
        '2020_11_21_23_07_58',
    ]

    get_data_algos_path(sarsa_dates, sarsa_lambda_dates, qlearning_dates, qlearning_lambda_dates, path=target_path)
