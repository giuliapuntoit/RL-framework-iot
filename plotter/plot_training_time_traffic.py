"""
    Class for plotting training time and traffic from files generated from GetTrainingTimeTraffic class
"""

import csv
import pathlib

import matplotlib
import matplotlib.pyplot
import matplotlib.font_manager

from plotter.support_plotter import print_cute_algo_name, build_output_dir_from_path, get_font_family_and_size, \
    get_extension

font_family, font_size = get_font_family_and_size()

matplotlib.pyplot.rcParams["font.family"] = font_family
matplotlib.pyplot.rcParams['font.size'] = font_size

input_dir = "./tmp/"
output_dir = "./"


def plot_training_time_traffic(path=None):
    """
    Generate boxplots for training time and traffic values saved into csv files
    """
    times = [[], [], [], []]
    traffic = [[], [], [], []]

    starter = "0"
    if path is not None:
        starter = "path" + str(path)

    # target_output_dir is current directory if path is not defined (I used it for data before tuning)
    target_output_dir = build_output_dir_from_path(output_dir, path)

    algos = ["sarsa", "sarsa_lambda", "qlearning", "qlearning_lambda"]

    # Check input_dir exists
    if pathlib.Path(input_dir).exists():
        pass
    else:
        print("Input directory does not exist.")
        exit(1)

    # read csv files generated by get_training_time_traffic.py
    for index, fa in enumerate(algos):
        with open(input_dir + starter + "_" + fa + ".csv", 'r') as csv_file:
            reader = csv.reader(csv_file, delimiter=',')
            next(reader, None)
            for row in reader:
                times[index].append(float(row[1]))
                traffic[index].append(int(row[2]))

    fig, ax = matplotlib.pyplot.subplots()

    col = ax.boxplot(times)
    ax.set_xticklabels([print_cute_algo_name(algos[0]), print_cute_algo_name(algos[1]), print_cute_algo_name(algos[2]), print_cute_algo_name(algos[3])])
    ax.set_ylabel('Time (s)')
    matplotlib.pyplot.xticks(rotation=45)
    # ax.set_title('Training time per algorithm')
    matplotlib.pyplot.grid(True, color='gray', linestyle='dashed')
    fig.tight_layout()
    matplotlib.pyplot.savefig(target_output_dir + 'training_times' + get_extension())
    matplotlib.pyplot.show()

    fig, ax = matplotlib.pyplot.subplots()
    col = ax.boxplot(traffic)  # , ["SARSA", "SARSA(位)", "Q-learning", "Q(位)"])
    ax.set_xticklabels(["SARSA", "SARSA(位)", "Q-learning", "Q(位)"])
    matplotlib.pyplot.xticks(rotation=45)
    ax.set_ylabel('Number of commands sent')
    # ax.set_title('Traffic generated per algorithm')
    matplotlib.pyplot.grid(True, color='gray', linestyle='dashed')
    fig.tight_layout()
    matplotlib.pyplot.savefig(target_output_dir + 'training_traffic' + get_extension())
    matplotlib.pyplot.show()


def main():
    # Get training time in seconds and traffic generated by training process, only sent commands
    # into a file that appends or writes:
    # Date | Training time | Sent commands
    # date | 123           |           150
    # As input file I need only the log file

    # Before tuning
    plot_training_time_traffic()

    # After tuning
    plot_training_time_traffic(path=1)
    plot_training_time_traffic(path=2)
    plot_training_time_traffic(path=3)
    plot_training_time_traffic(path=4)


if __name__ == '__main__':
    main()
