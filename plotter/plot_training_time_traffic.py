"""
    Class for plotting training time and traffic from files generated from GetTrainingTimeTraffic class
"""

import numpy as np
import csv
import matplotlib
import matplotlib.pyplot
import matplotlib.font_manager

from plotter.support_plotter import print_cute_algo_name

matplotlib.pyplot.rcParams["font.family"] = "Times New Roman"
matplotlib.pyplot.rcParams['font.size'] = 20


def plot_training_time_traffic(path=None):
    """
    Generate boxplots for training time and traffic values saved into csv files
    """
    times = [[], [], [], []]
    traffic = [[], [], [], []]

    output_dir = "./"
    starter = "0"
    if path in [1, 2, 3]:
        starter = "path" + str(path)
        output_dir = "../plot/path" + str(path) + "/"

    file_algo = ["sarsa", "sarsa_lambda", "qlearning", "qlearning_lambda"]

    # read csv files generated by get_training_time_traffic.py
    for index, fa in enumerate(file_algo):
        with open(starter + "_" + fa + ".csv", 'r') as csv_file:
            reader = csv.reader(csv_file, delimiter=',')
            next(reader, None)
            for row in reader:
                times[index].append(float(row[1]))
                traffic[index].append(int(row[2]))

    fig, ax = matplotlib.pyplot.subplots()

    col = ax.boxplot(times)  # , ["SARSA", "SARSA(λ)", "Q-learning", "Q(λ)"])
    ax.set_xticklabels([print_cute_algo_name(file_algo[0]), print_cute_algo_name(file_algo[1]), print_cute_algo_name(file_algo[2]), print_cute_algo_name(file_algo[3])])
    ax.set_ylabel('Time (s)')
    # ax.set_title('Training time per algorithm')
    matplotlib.pyplot.grid(True, color='gray', linestyle='dashed')
    fig.tight_layout()
    matplotlib.pyplot.savefig(output_dir + 'training_times.png')
    matplotlib.pyplot.show()

    fig, ax = matplotlib.pyplot.subplots()
    col = ax.boxplot(traffic)  # , ["SARSA", "SARSA(λ)", "Q-learning", "Q(λ)"])
    ax.set_xticklabels(["SARSA", "SARSA(λ)", "Q-learning", "Q(λ)"])
    ax.set_ylabel('Number of commands sent')
    # ax.set_title('Traffic generated per algorithm')
    matplotlib.pyplot.grid(True, color='gray', linestyle='dashed')
    fig.tight_layout()
    matplotlib.pyplot.savefig(output_dir + 'training_traffic.png')
    matplotlib.pyplot.show()


if __name__ == '__main__':
    # Get training time in seconds and traffic generated by training process, only sent commands
    # into a file that appends or writes:
    # Date | Training time | Sent commands
    # date | 123           |           150
    # As input file I need only the log file

    # Before tuning
    plot_training_time_traffic()

    # After tuning
    plot_training_time_traffic(path=1)
    plot_training_time_traffic(path=2)
    plot_training_time_traffic(path=3)
